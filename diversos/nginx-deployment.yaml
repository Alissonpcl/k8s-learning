apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  labels:
    app: nginx-deployment
spec:
  replicas: 1
  template: 
    metadata: 
      name: nginx-pod
      labels:
        app: nginx-pod
    spec:
      containers:
        - name: nginx-container
          image: nginx:latest
          ports:
            - containerPort: 80
          # Liveness Probe e usado para garantir que a aplicacao continua funcionando
          # Se nao estiver funcionando o Container sera reiniciado
          livenessProbe:
            httpGet: # Fará um requisicao GET
              path: / 
              port: 80
            periodSeconds: 3 # Testa a cada 3s
            failureThreshold: 3 # Quantas vezes deve falhar antes de reiniciar
            initialDelaySeconds: 10 # Tempo inicial de espera, necessario para que o container esteja pronto
          # O mesmo que o LivenessProbe porém para garantir que o container já esta pronto
          # para receber requisições
          readinessProbe:
            httpGet: # 
              path: / 
              port: 80
            periodSeconds: 3 
            failureThreshold: 3 # Após 3 tentativas sem sucesso as requisições serão enviadas mesmo assim
            initialDelaySeconds: 10
  selector:
    matchLabels:
      app: nginx-pod

---

apiVersion: v1
kind: Service
metadata:
  name: svc-nginx
spec:
  ## O ClusterIP podera ser acessado internamente também por svc-nginx.default.svc onde default e o nome do namespace
  type: ClusterIP 
  ports:
    - port: 80
  selector:
    app: nginx-pod


# Pode ser testado com o CURL do proprio container do Nginx
# kubectl exec nome_pod -it  -- sh


---

apiVersion: v1
kind: Service
metadata:
  name: svc-nginx-nodeport
spec:
  ## O ClusterIP podera ser acessado internamente também por svc-nginx.default.svc onde default e o nome do namespace
  type: NodePort
  ports:
    - port: 80
      nodePort: 30000
  selector:
    app: nginx-pod